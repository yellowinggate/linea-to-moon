// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract UniswapStaking {
    IUniswapV2Router02 public uniswapRouter;
    IUniswapV2Pair public uniswapPair;
    IERC20 public tokenToStake;

    constructor(address _routerAddress, address _pairAddress, address _tokenAddress) {
        uniswapRouter = IUniswapV2Router02(_routerAddress);
        uniswapPair = IUniswapV2Pair(_pairAddress);
        tokenToStake = IERC20(_tokenAddress);
    }

    function stake(uint256 amount) external {
        require(amount > 0, "Amount must be greater than zero");
        require(tokenToStake.transferFrom(msg.sender, address(this), amount), "Transfer failed");

        // Add liquidity to the Uniswap pool
        uint256 ethAmount = amount; // Assuming the token is paired with ETH
        uniswapRouter.addLiquidityETH{value: ethAmount}(
            address(tokenToStake),
            amount,
            0, // Min tokens
            0, // Min ETH
            msg.sender,
            block.timestamp
        );
    }
}
